function [Juv] = NavierStokes_RK_CoupledJacobian(uvector,vvector, ...
                                            uOperator,vOperator, ...
                                            Mesh,Boundaries,Parameters)

  % u Jacobian
  Del2u = Parameters.Nu * uOperator.L_u;
  d_dx = spdiags((uOperator.D_ux * uvector),0, ...
                 (Mesh.Nx+1)*Mesh.Ny,(Mesh.Nx+1)*Mesh.Ny)...              
                 + uvector.*uOperator.D_ux;       

  v_interp = Apply_vInterpWallBoundaries(vOperator.v_bar_interp * vvector, ...
                                         Boundaries,Mesh.Nx,Mesh.Ny);
  d_dy = v_interp.*uOperator.D_uy;
  
  J_udot_du = Del2u - d_dx - d_dy;

  J_udot_dv = -(spdiags(uOperator.D_uy * uvector,0, ...
               (Mesh.Nx+1)*Mesh.Ny, ...
               (Mesh.Nx+1)*Mesh.Ny) ...
               + spdiags(uOperator.b_uy_bc,0, ...
                        (Mesh.Nx+1)*Mesh.Ny, ...
                        (Mesh.Nx+1)*Mesh.Ny))*vOperator.v_bar_interp;

  % v Jacobian
  Del2v = Parameters.Nu * vOperator.L_v;
  d_dy = spdiags(vOperator.D_vy * vvector,0,...
                 (Mesh.Nx)*(Mesh.Ny+1),(Mesh.Nx)*(Mesh.Ny+1))...
                 + vvector.* vOperator.D_vy;
              
  u_interp = Apply_uInterpWallBoundaries(uOperator.u_bar_interp * uvector, ...
                                         Boundaries,Mesh.Nx,Mesh.Ny);
  d_dx = u_interp.* vOperator.D_vx;

  J_vdot_dv = Del2v - d_dy - d_dx;

  J_vdot_du = -(spdiags(vOperator.D_vx * vvector,0, ...
                          Mesh.Nx*(Mesh.Ny+1), ...
                          Mesh.Nx*(Mesh.Ny+1)) ...
                          + spdiags(vOperator.b_vx_bc,0, ...
                                    Mesh.Nx*(Mesh.Ny+1), ...
                                    Mesh.Nx*(Mesh.Ny+1)))*uOperator.u_bar_interp;
  
 
% Construction
J_u = [J_udot_du;J_vdot_du];
J_v = [J_udot_dv;J_vdot_dv];
Juv = [J_u J_v];

   
end
